const names = ['Саша', 'Елена', 'Игорь', 'Уля']
const letters = ['e', 'c', 'd', 'b', 'a']

// names.push('Алена') // Добавляет элемент в конец массива
// names.unshift('Алена') // Добавляет элемент в начало массива (лучше не использовать. Работает медленнее чем push)
// names.shift() // Убирает, и возвращает первый элемент из массива и возвращает
// names.pop() // Убирает, и возвращает последний элемент из массива
// names.reverse() // Изменяет массив, располагает элементы в обратно порядке (лучше не использовать)
// names.toReversed() // Возвращает новый массив с расположенными в обратном порядке элементами
// letters.sort() // Изменяет массив, сортируя его (лучше не использовать)
// letters.toSorted() // Возвращает новый массив, сортируя его
// names.splice(2, 1) // Изменяет содержимое массива, удаляя элементы
// names.toSpliced(2, 1) // Возвращает новый массив, удаляя элементы
// names.indexOf('Елена') // Находит и возвращает индекс элемента в массиве по названию
// names.with(2, 'Марина') // Возвращает новый массив. Изменяет элемент в массиве
// names.map((name, index) => {}) // Возвращает новый массив с результатом вызова указанной функции для каждого элемента массива
// names.includes('Елена') // Определяет, содержит ли массив определенное значение, возвращая true или false

const people = [
    {name: 'Саша', budget: 4200},
    {name: 'Елена', budget: 15100},
    {name: 'Игорь', budget: 300},
    {name: 'Уля', budget: 7520},
]

// people.find(p => p.budget === 7520) // Возвращает значение первого найденного в массиве элемента, которое удовлетворяет условию переданному в callback функции
// people.findIndex(p => p.budget === 7520) // Возвращает индекс в массиве, если элемент удовлетворяет условию проверяющей функции
// people.filter(p => p.budget > 4200) // Создаёт новый массив со всеми элементами, прошедшими проверку, задаваемую в передаваемой функции.


// Practice >>>>>>

// const sumBudget = people
//     .filter(p => p.budget > 4200)
//     .map(p => p.budget)
//     .reduce((acc, p) => acc + p, 0)
// console.log(sumBudget)

// const string = 'hello world'
// const reversed = string.split('').toReversed().join('!').split('').filter(c => c !== '!').join('')
//
// console.log(reversed)